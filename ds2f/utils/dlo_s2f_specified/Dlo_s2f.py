# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Dlo_s2f
else:
    import _Dlo_s2f

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DLO_s2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r_length, r_pieces, r_weight=0.0, boolErrs=False):
        _Dlo_s2f.DLO_s2f_swiginit(self, _Dlo_s2f.new_DLO_s2f(r_length, r_pieces, r_weight, boolErrs))
    nv = property(_Dlo_s2f.DLO_s2f_nv_get, _Dlo_s2f.DLO_s2f_nv_set)
    nodes = property(_Dlo_s2f.DLO_s2f_nodes_get, _Dlo_s2f.DLO_s2f_nodes_set)
    extforces = property(_Dlo_s2f.DLO_s2f_extforces_get, _Dlo_s2f.DLO_s2f_extforces_set)
    length = property(_Dlo_s2f.DLO_s2f_length_get, _Dlo_s2f.DLO_s2f_length_set)
    w_perpiece = property(_Dlo_s2f.DLO_s2f_w_perpiece_get, _Dlo_s2f.DLO_s2f_w_perpiece_set)
    n_force = property(_Dlo_s2f.DLO_s2f_n_force_get, _Dlo_s2f.DLO_s2f_n_force_set)
    boolUnreliable = property(_Dlo_s2f.DLO_s2f_boolUnreliable_get, _Dlo_s2f.DLO_s2f_boolUnreliable_set)
    raiseErrs = property(_Dlo_s2f.DLO_s2f_raiseErrs_get, _Dlo_s2f.DLO_s2f_raiseErrs_set)
    distmat = property(_Dlo_s2f.DLO_s2f_distmat_get, _Dlo_s2f.DLO_s2f_distmat_set)
    nodeposMat = property(_Dlo_s2f.DLO_s2f_nodeposMat_get, _Dlo_s2f.DLO_s2f_nodeposMat_set)
    matA = property(_Dlo_s2f.DLO_s2f_matA_get, _Dlo_s2f.DLO_s2f_matA_set)
    vecB = property(_Dlo_s2f.DLO_s2f_vecB_get, _Dlo_s2f.DLO_s2f_vecB_set)
    fSol = property(_Dlo_s2f.DLO_s2f_fSol_get, _Dlo_s2f.DLO_s2f_fSol_set)
    tSol = property(_Dlo_s2f.DLO_s2f_tSol_get, _Dlo_s2f.DLO_s2f_tSol_set)
    secMid1 = property(_Dlo_s2f.DLO_s2f_secMid1_get, _Dlo_s2f.DLO_s2f_secMid1_set)
    secMid2 = property(_Dlo_s2f.DLO_s2f_secMid2_get, _Dlo_s2f.DLO_s2f_secMid2_set)

    def calculateExternalForces(self, dim_efp, dim_ef, dim_et, dim_nt, dim_np, dim_nq):
        return _Dlo_s2f.DLO_s2f_calculateExternalForces(self, dim_efp, dim_ef, dim_et, dim_nt, dim_np, dim_nq)

    def updateState(self, dim_nt, dim_np, dim_nq):
        return _Dlo_s2f.DLO_s2f_updateState(self, dim_nt, dim_np, dim_nq)
    __swig_destroy__ = _Dlo_s2f.delete_DLO_s2f

# Register DLO_s2f in _Dlo_s2f:
_Dlo_s2f.DLO_s2f_swigregister(DLO_s2f)

