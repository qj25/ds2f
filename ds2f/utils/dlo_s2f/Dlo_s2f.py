# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Dlo_s2f
else:
    import _Dlo_s2f

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Dlo_s2f.delete_SwigPyIterator

    def value(self):
        return _Dlo_s2f.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Dlo_s2f.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Dlo_s2f.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Dlo_s2f.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Dlo_s2f.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Dlo_s2f.SwigPyIterator_copy(self)

    def next(self):
        return _Dlo_s2f.SwigPyIterator_next(self)

    def __next__(self):
        return _Dlo_s2f.SwigPyIterator___next__(self)

    def previous(self):
        return _Dlo_s2f.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Dlo_s2f.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Dlo_s2f.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Dlo_s2f.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Dlo_s2f.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Dlo_s2f.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Dlo_s2f.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Dlo_s2f.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Dlo_s2f:
_Dlo_s2f.SwigPyIterator_swigregister(SwigPyIterator)
class Section(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start_idx = property(_Dlo_s2f.Section_start_idx_get, _Dlo_s2f.Section_start_idx_set)
    end_idx = property(_Dlo_s2f.Section_end_idx_get, _Dlo_s2f.Section_end_idx_set)
    n_force = property(_Dlo_s2f.Section_n_force_get, _Dlo_s2f.Section_n_force_set)
    avg_force = property(_Dlo_s2f.Section_avg_force_get, _Dlo_s2f.Section_avg_force_set)
    indiv_forces = property(_Dlo_s2f.Section_indiv_forces_get, _Dlo_s2f.Section_indiv_forces_set)
    c3 = property(_Dlo_s2f.Section_c3_get, _Dlo_s2f.Section_c3_set)

    def __init__(self, start, end):
        _Dlo_s2f.Section_swiginit(self, _Dlo_s2f.new_Section(start, end))
    __swig_destroy__ = _Dlo_s2f.delete_Section

# Register Section in _Dlo_s2f:
_Dlo_s2f.Section_swigregister(Section)
class ForceSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start_pos = property(_Dlo_s2f.ForceSection_start_pos_get, _Dlo_s2f.ForceSection_start_pos_set)
    end_pos = property(_Dlo_s2f.ForceSection_end_pos_get, _Dlo_s2f.ForceSection_end_pos_set)
    force = property(_Dlo_s2f.ForceSection_force_get, _Dlo_s2f.ForceSection_force_set)
    torque = property(_Dlo_s2f.ForceSection_torque_get, _Dlo_s2f.ForceSection_torque_set)
    force_pos = property(_Dlo_s2f.ForceSection_force_pos_get, _Dlo_s2f.ForceSection_force_pos_set)

    def __init__(self):
        _Dlo_s2f.ForceSection_swiginit(self, _Dlo_s2f.new_ForceSection())

    def get_start_pos(self):
        return _Dlo_s2f.ForceSection_get_start_pos(self)

    def get_end_pos(self):
        return _Dlo_s2f.ForceSection_get_end_pos(self)

    def get_force(self):
        return _Dlo_s2f.ForceSection_get_force(self)

    def get_torque(self):
        return _Dlo_s2f.ForceSection_get_torque(self)

    def get_force_pos(self):
        return _Dlo_s2f.ForceSection_get_force_pos(self)

    def set_start_pos(self, pos):
        return _Dlo_s2f.ForceSection_set_start_pos(self, pos)

    def set_end_pos(self, pos):
        return _Dlo_s2f.ForceSection_set_end_pos(self, pos)

    def set_force(self, f):
        return _Dlo_s2f.ForceSection_set_force(self, f)

    def set_torque(self, t):
        return _Dlo_s2f.ForceSection_set_torque(self, t)

    def set_force_pos(self, r):
        return _Dlo_s2f.ForceSection_set_force_pos(self, r)

    def __str__(self):
        return f"ForceSection(force={self.force}, force_pos={self.force_pos}, start_pos={self.start_pos}, end_pos={self.end_pos})"

    def get_force(self):
        return self.force

    def get_torque(self):
        return self.torque

    def get_force_pos(self):
        return self.force_pos

    def get_start_pos(self):
        return self.start_pos

    def get_end_pos(self):
        return self.end_pos

    __swig_destroy__ = _Dlo_s2f.delete_ForceSection

# Register ForceSection in _Dlo_s2f:
_Dlo_s2f.ForceSection_swigregister(ForceSection)
class DLO_s2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r_length, r_pieces, r_weight=0.0, boolErrs=False, boolSolveTorq=False, torque_tolerance_=1e-8, tolC2_=1e-4, tolC3_=1e-4):
        _Dlo_s2f.DLO_s2f_swiginit(self, _Dlo_s2f.new_DLO_s2f(r_length, r_pieces, r_weight, boolErrs, boolSolveTorq, torque_tolerance_, tolC2_, tolC3_))
    torque_tolerance = property(_Dlo_s2f.DLO_s2f_torque_tolerance_get, _Dlo_s2f.DLO_s2f_torque_tolerance_set)
    tolC2 = property(_Dlo_s2f.DLO_s2f_tolC2_get, _Dlo_s2f.DLO_s2f_tolC2_set)
    tolC3 = property(_Dlo_s2f.DLO_s2f_tolC3_get, _Dlo_s2f.DLO_s2f_tolC3_set)
    parllThreshold = property(_Dlo_s2f.DLO_s2f_parllThreshold_get, _Dlo_s2f.DLO_s2f_parllThreshold_set)
    nv = property(_Dlo_s2f.DLO_s2f_nv_get, _Dlo_s2f.DLO_s2f_nv_set)
    length = property(_Dlo_s2f.DLO_s2f_length_get, _Dlo_s2f.DLO_s2f_length_set)
    w_perpiece = property(_Dlo_s2f.DLO_s2f_w_perpiece_get, _Dlo_s2f.DLO_s2f_w_perpiece_set)
    n_force = property(_Dlo_s2f.DLO_s2f_n_force_get, _Dlo_s2f.DLO_s2f_n_force_set)
    force_sections = property(_Dlo_s2f.DLO_s2f_force_sections_get, _Dlo_s2f.DLO_s2f_force_sections_set)
    raiseErrs = property(_Dlo_s2f.DLO_s2f_raiseErrs_get, _Dlo_s2f.DLO_s2f_raiseErrs_set)
    bSolveTorq = property(_Dlo_s2f.DLO_s2f_bSolveTorq_get, _Dlo_s2f.DLO_s2f_bSolveTorq_set)
    nodeposMat = property(_Dlo_s2f.DLO_s2f_nodeposMat_get, _Dlo_s2f.DLO_s2f_nodeposMat_set)
    nodetorqMat = property(_Dlo_s2f.DLO_s2f_nodetorqMat_get, _Dlo_s2f.DLO_s2f_nodetorqMat_set)

    def calculateExternalForces(self, dim_nt, dim_np, dim_nq):
        return _Dlo_s2f.DLO_s2f_calculateExternalForces(self, dim_nt, dim_np, dim_nq)

    def updateState(self, dim_nt, dim_np, dim_nq):
        return _Dlo_s2f.DLO_s2f_updateState(self, dim_nt, dim_np, dim_nq)

    def findParallelEndSections(self):
        return _Dlo_s2f.DLO_s2f_findParallelEndSections(self)

    def checkUDEndSections(self):
        return _Dlo_s2f.DLO_s2f_checkUDEndSections(self)

    def hasParallelVectors(self, v1, v2, v3, threshold=0.999):
        return _Dlo_s2f.DLO_s2f_hasParallelVectors(self, v1, v2, v3, threshold)

    def findExactMidpoint(self, startId, endId):
        return _Dlo_s2f.DLO_s2f_findExactMidpoint(self, startId, endId)

    def findMiddleNodePosition(self, startId, endId):
        return _Dlo_s2f.DLO_s2f_findMiddleNodePosition(self, startId, endId)

    def findTorqueBalancePoint(self, startId, endId, force, targetTorque):
        return _Dlo_s2f.DLO_s2f_findTorqueBalancePoint(self, startId, endId, force, targetTorque)

    def optimizeTorqueBalancePoint(self, startId, endId, force, targetTorque):
        return _Dlo_s2f.DLO_s2f_optimizeTorqueBalancePoint(self, startId, endId, force, targetTorque)
    __swig_destroy__ = _Dlo_s2f.delete_DLO_s2f

# Register DLO_s2f in _Dlo_s2f:
_Dlo_s2f.DLO_s2f_swigregister(DLO_s2f)
class ForceSectionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Dlo_s2f.ForceSectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Dlo_s2f.ForceSectionVector___nonzero__(self)

    def __bool__(self):
        return _Dlo_s2f.ForceSectionVector___bool__(self)

    def __len__(self):
        return _Dlo_s2f.ForceSectionVector___len__(self)

    def __getslice__(self, i, j):
        return _Dlo_s2f.ForceSectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Dlo_s2f.ForceSectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Dlo_s2f.ForceSectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Dlo_s2f.ForceSectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Dlo_s2f.ForceSectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Dlo_s2f.ForceSectionVector___setitem__(self, *args)

    def pop(self):
        return _Dlo_s2f.ForceSectionVector_pop(self)

    def append(self, x):
        return _Dlo_s2f.ForceSectionVector_append(self, x)

    def empty(self):
        return _Dlo_s2f.ForceSectionVector_empty(self)

    def size(self):
        return _Dlo_s2f.ForceSectionVector_size(self)

    def swap(self, v):
        return _Dlo_s2f.ForceSectionVector_swap(self, v)

    def begin(self):
        return _Dlo_s2f.ForceSectionVector_begin(self)

    def end(self):
        return _Dlo_s2f.ForceSectionVector_end(self)

    def rbegin(self):
        return _Dlo_s2f.ForceSectionVector_rbegin(self)

    def rend(self):
        return _Dlo_s2f.ForceSectionVector_rend(self)

    def clear(self):
        return _Dlo_s2f.ForceSectionVector_clear(self)

    def get_allocator(self):
        return _Dlo_s2f.ForceSectionVector_get_allocator(self)

    def pop_back(self):
        return _Dlo_s2f.ForceSectionVector_pop_back(self)

    def erase(self, *args):
        return _Dlo_s2f.ForceSectionVector_erase(self, *args)

    def __init__(self, *args):
        _Dlo_s2f.ForceSectionVector_swiginit(self, _Dlo_s2f.new_ForceSectionVector(*args))

    def push_back(self, x):
        return _Dlo_s2f.ForceSectionVector_push_back(self, x)

    def front(self):
        return _Dlo_s2f.ForceSectionVector_front(self)

    def back(self):
        return _Dlo_s2f.ForceSectionVector_back(self)

    def assign(self, n, x):
        return _Dlo_s2f.ForceSectionVector_assign(self, n, x)

    def resize(self, *args):
        return _Dlo_s2f.ForceSectionVector_resize(self, *args)

    def insert(self, *args):
        return _Dlo_s2f.ForceSectionVector_insert(self, *args)

    def reserve(self, n):
        return _Dlo_s2f.ForceSectionVector_reserve(self, n)

    def capacity(self):
        return _Dlo_s2f.ForceSectionVector_capacity(self)
    __swig_destroy__ = _Dlo_s2f.delete_ForceSectionVector

# Register ForceSectionVector in _Dlo_s2f:
_Dlo_s2f.ForceSectionVector_swigregister(ForceSectionVector)

